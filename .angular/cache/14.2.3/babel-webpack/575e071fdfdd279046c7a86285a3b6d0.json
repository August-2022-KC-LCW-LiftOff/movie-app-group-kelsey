{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./comments.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"../comment/comment.component\";\nimport * as i4 from \"../commentForm/commentForm.component\";\n\nfunction CommentsComponent_comment_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"comment\", 6);\n    i0.ɵɵlistener(\"setActiveComment\", function CommentsComponent_comment_7_Template_comment_setActiveComment_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.setActiveComment($event));\n    })(\"addComment\", function CommentsComponent_comment_7_Template_comment_addComment_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.addComment($event));\n    })(\"deleteComment\", function CommentsComponent_comment_7_Template_comment_deleteComment_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.deleteComment($event));\n    })(\"updateComment\", function CommentsComponent_comment_7_Template_comment_updateComment_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.updateComment($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const rootComment_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"comment\", rootComment_r1)(\"replies\", ctx_r0.getReplies(rootComment_r1.id))(\"activeComment\", ctx_r0.activeComment)(\"currentUserId\", ctx_r0.currentUserId);\n  }\n} //import { CommentsService } from '../../comments/comments.service';\n//import { ActiveCommentInterface } from '../../activeComment/activeComment.interface';\n//import { CommentInterface } from '../../comment/comment.interface';\n\n\nexport let CommentsComponent = /*#__PURE__*/(() => {\n  class CommentsComponent {\n    constructor(commentsService) {\n      this.commentsService = commentsService;\n      this.comments = [];\n      this.activeComment = null;\n    }\n\n    ngOnInit() {\n      this.commentsService.getComments().subscribe(comments => {\n        this.comments = comments;\n      });\n    }\n\n    getRootComments() {\n      return this.comments.filter(comment => comment.parentId === null);\n    }\n\n    updateComment({\n      text,\n      commentId\n    }) {\n      this.commentsService.updateComment(commentId, text).subscribe(updatedComment => {\n        this.comments = this.comments.map(comment => {\n          if (comment.id === commentId) {\n            return updatedComment;\n          }\n\n          return comment;\n        });\n        this.activeComment = null;\n      });\n    }\n\n    deleteComment(commentId) {\n      this.commentsService.deleteComment(commentId).subscribe(() => {\n        this.comments = this.comments.filter(comment => comment.id !== commentId);\n      });\n    }\n\n    setActiveComment(activeComment) {\n      this.activeComment = activeComment;\n    }\n\n    addComment({\n      text,\n      parentId\n    }) {\n      this.commentsService.createComment(text, parentId).subscribe(createdComment => {\n        this.comments = [...this.comments, createdComment];\n        this.activeComment = null;\n      });\n    }\n\n    getReplies(commentId) {\n      return this.comments.filter(comment => comment.parentId === commentId).sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime());\n    }\n\n  }\n\n  CommentsComponent.ɵfac = function CommentsComponent_Factory(t) {\n    return new (t || CommentsComponent)(i0.ɵɵdirectiveInject(i1.CommentsService));\n  };\n\n  CommentsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CommentsComponent,\n    selectors: [[\"comments\"]],\n    inputs: {\n      currentUserId: \"currentUserId\"\n    },\n    decls: 8,\n    vars: 1,\n    consts: [[1, \"comments\"], [1, \"comments-title\"], [1, \"comment-form-title\"], [\"submitLabel\", \"Write\", 3, \"handleSubmit\"], [1, \"comments-container\"], [3, \"comment\", \"replies\", \"activeComment\", \"currentUserId\", \"setActiveComment\", \"addComment\", \"deleteComment\", \"updateComment\", 4, \"ngFor\", \"ngForOf\"], [3, \"comment\", \"replies\", \"activeComment\", \"currentUserId\", \"setActiveComment\", \"addComment\", \"deleteComment\", \"updateComment\"]],\n    template: function CommentsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h3\", 1);\n        i0.ɵɵtext(2, \"Comments\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 2);\n        i0.ɵɵtext(4, \"Write comment\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"comment-form\", 3);\n        i0.ɵɵlistener(\"handleSubmit\", function CommentsComponent_Template_comment_form_handleSubmit_5_listener($event) {\n          return ctx.addComment({\n            text: $event,\n            parentId: null\n          });\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"div\", 4);\n        i0.ɵɵtemplate(7, CommentsComponent_comment_7_Template, 1, 4, \"comment\", 5);\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngForOf\", ctx.getRootComments());\n      }\n    },\n    dependencies: [i2.NgForOf, i3.CommentComponent, i4.CommentFormComponent],\n    encapsulation: 2\n  });\n  return CommentsComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}