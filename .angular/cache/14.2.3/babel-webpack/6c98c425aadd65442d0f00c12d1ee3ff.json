{"ast":null,"code":"import firebase from '@firebase/app-compat';\nimport { httpsCallable, httpsCallableFromURL, connectFunctionsEmulator } from '@firebase/functions';\nimport { FirebaseError } from '@firebase/util';\nimport { Component } from '@firebase/component';\nconst name = \"@firebase/functions-compat\";\nconst version = \"0.2.4\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nclass FunctionsService {\n  constructor(app, _delegate) {\n    this.app = app;\n    this._delegate = _delegate;\n    this._region = this._delegate.region;\n    this._customDomain = this._delegate.customDomain;\n  }\n\n  httpsCallable(name, options) {\n    return httpsCallable(this._delegate, name, options);\n  }\n\n  httpsCallableFromURL(url, options) {\n    return httpsCallableFromURL(this._delegate, url, options);\n  }\n  /**\r\n   * Deprecated in pre-modularized repo, does not exist in modularized\r\n   * functions package, need to convert to \"host\" and \"port\" args that\r\n   * `useFunctionsEmulatorExp` takes.\r\n   * @deprecated\r\n   */\n\n\n  useFunctionsEmulator(origin) {\n    const match = origin.match('[a-zA-Z]+://([a-zA-Z0-9.-]+)(?::([0-9]+))?');\n\n    if (match == null) {\n      throw new FirebaseError('functions', 'No origin provided to useFunctionsEmulator()');\n    }\n\n    if (match[2] == null) {\n      throw new FirebaseError('functions', 'Port missing in origin provided to useFunctionsEmulator()');\n    }\n\n    return connectFunctionsEmulator(this._delegate, match[1], Number(match[2]));\n  }\n\n  useEmulator(host, port) {\n    return connectFunctionsEmulator(this._delegate, host, port);\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst DEFAULT_REGION = 'us-central1';\n\nconst factory = (container, {\n  instanceIdentifier: regionOrCustomDomain\n}) => {\n  // Dependencies\n  const app = container.getProvider('app-compat').getImmediate();\n  const functionsServiceExp = container.getProvider('functions').getImmediate({\n    identifier: regionOrCustomDomain !== null && regionOrCustomDomain !== void 0 ? regionOrCustomDomain : DEFAULT_REGION\n  });\n  return new FunctionsService(app, functionsServiceExp);\n};\n\nfunction registerFunctions() {\n  const namespaceExports = {\n    Functions: FunctionsService\n  };\n  firebase.INTERNAL.registerComponent(new Component('functions-compat', factory, \"PUBLIC\"\n  /* PUBLIC */\n  ).setServiceProps(namespaceExports).setMultipleInstances(true));\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nregisterFunctions();\nfirebase.registerVersion(name, version); //# sourceMappingURL=index.esm2017.js.map","map":null,"metadata":{},"sourceType":"module"}